<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cadminrollforward" xml:lang="en-us">
<title>Roll-forward recovery</title>
<shortdesc><ph conref="../conrefs.dita#prod/productshortname"></ph> supports
roll-forward recovery to restore a damaged database to the most recent state
before a failure occurred.</shortdesc>
<prolog><metadata>
<keywords><indexterm>Online archived logs</indexterm><indexterm>Online archived
logs<indexterm>enabling</indexterm></indexterm><indexterm>Online archived
logs<indexterm>disabling</indexterm></indexterm><indexterm>Backing up<indexterm>Roll-forward
recovery</indexterm></indexterm></keywords>
</metadata></prolog>
<conbody>
<p><ph conref="../conrefs.dita#prod/productshortname"></ph> restores a database
from full backup and replays all the transactions after the backup. All the
log files after a backup are required to replay the transactions after the
backup. By default, the database keeps only logs that are required for
crash recovery. For roll-forward recovery to be successful, all log files must
be archived after a backup. Log files can be archived using the backup function
calls that enable log archiving.</p>
<p>In roll-forward recovery, the log archival mode ensures that all old log
files are available. The log files are available only from the time that the
log archival mode is enabled. </p>
<p><ph conref="../conrefs.dita#prod/productshortname"></ph> uses the following
information to restore the database: <ul>
<li>The backup copy of the database</li>
<li>The set of archived logs</li>
<li>The current online active log</li>
</ul></p>
<p>You cannot use roll-forward recovery to restore individual tables.
Roll-forward recovery recovers the entire database.</p>
<p>To restore a database by using roll-forward recovery, you must already have a
backup copy of the database, all the archived logs since the backup was created,
and the active log files. All the log files should be in the database log
directory.</p>
<p>There are two types of log files in
<ph conref="../conrefs.dita#prod/productshortname"></ph>: active logs and online
archived logs.</p>
<dl><dlentry>
<dt>Active logs</dt>
<dd>Active logs are used during crash recovery to prevent a failure that might
leave a database in an inconsistent state. Roll-forward recovery can also
use the active logs to recover to the end of the log files. Active logs are
located in the database log path directory.</dd>
</dlentry><dlentry>
<dt>Online archived logs</dt>
<dd>Log files that are stored for roll-forward recovery use when they are no
longer needed for crash recovery. Online archived logs are also kept in the
database log path directory.</dd>
</dlentry></dl>
<section><title>Enabling log archival mode</title>
<p>Online archive logs are available only if the database is enabled for log
archival mode. You can use the following system procedure to enable the database
for log archival mode:</p>
<codeblock>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE
(IN BACKUPDIR VARCHAR(32672), IN SMALLINT DELETE_ARCHIVED_LOG_FILES)</codeblock>
<p>The input parameters for this procedure specify the location where the backup
should be stored and specify whether or not the database should keep online
archived logs for the backup. Existing online archived log files that were
created before this backup will be deleted if the input parameter value for the
<codeph>DELETE_ARCHIVED_LOG_FILES</codeph> parameter is non-zero. The log files
are deleted only after a successful backup.
<note>Make sure to store the backup database in a safe place when you choose the
log file removal option.</note></p>
<p>The
<codeph>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE</codeph>
procedure will issue an error if there are any unlogged operations in the same
transaction as the backup procedure.</p>
<p>If any unlogged operations are in progress in other transactions in the
system when the backup starts, this procedure will block until those
transactions are complete before performing the backup.
<ph conref="../conrefs.dita#prod/productshortname"></ph> automatically converts
unlogged operations to logged mode if they are started while the backup is in
progress (except operations that maintain application jar files in the
database). Procedures to install, replace, and remove jar files in a database
are blocked while the backup is in progress.</p>
<p>If you do not want backup to block until unlogged operations in other
transactions are complete, use the
<codeph>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT</codeph>
procedure. This procedure issues an error immediately at the start of the backup
if there are any transactions in progress with unlogged operations, instead of
waiting for those transactions to complete.</p>
</section>
<section><title>Disabling log archival mode</title>
<p>After you enable log archival mode, the database will always have the log
archival mode enabled even if it is subsequently booted or backed up. The
only way to disable the log archive mode is to run the following procedure:</p>
<codeblock>SYSCS_UTIL.SYSCS_DISABLE_LOG_ARCHIVE_MODE
(IN SMALLINT DELETE_ARCHIVED_LOG_FILES)</codeblock>
<p>This system procedure disables the log archive mode and deletes any existing
online archived log files if the input parameter
<codeph>DELETE_ARCHIVED_LOG_FILES</codeph> is non-zero.</p>
</section>
<section><title>Performing roll-forward recovery</title>
<p>If you have a backup made by using
<codeph>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE</codeph> or
<codeph>SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT</codeph>,
you can restore it to its most recent state by using the full backup copy,
archived logs, and active logs. You perform a roll-forward recovery by
specifying the connection URL attribute
<codeph>rollForwardRecoveryFrom=<i>path</i></codeph> at boot time. All the log
files should be in the database log path directory.</p>
<p>The steps involved are as follows. They do not show the commands to start
<codeph>ij</codeph>.</p>
<ol>
<li><b>Back up the database with log archive mode enabled.</b>
<p>For example, you could back up a database named <codeph>wombat</codeph>
to the <codeph>/backup</codeph> directory as follows. After many operations,
the database crashes.</p>
<codeblock>ij> <b>connect 'jdbc:derby:wombat;create=true';</b>
ij> <b>create table t1(a int not null primary key);</b>
0 rows inserted/updated/deleted
------------------DML/DDL Operations
ij> <b>CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE
('/backup', 0);</b>
0 rows inserted/updated/deleted
ij> <b>insert into t1 values(19);</b>
1 row inserted/updated/deleted
ij> <b>create table t2(a int);</b>
0 rows inserted/updated/deleted
-----------------DML/DDL Operations
-----------------Database Crashed (Media Corruption on data disks)</codeblock>
</li>
<li><b>Prepare the database for restoration.</b>
<p>Before you restore the database, shut down the original database and rename
the original database directory. For example, after shutdown, you could issue
the following commands in a Linux shell:</p>
<codeblock><b>mv /databases/wombat /databases/brokenwombat 
cd /databases</b></codeblock>
</li>
<li><b>Restore the database using roll-forward recovery.</b>
<p>Since you moved the database, you need to specify the
<codeph>logDevice=<i>logDirectoryPath</i></codeph> attribute in addition to the
<codeph>rollForwardRecoveryFrom=<i>path</i></codeph> attribute when you restore
the database using roll-forward recovery. Use commands like the following (the
connection URL must be all on one line):</p>
<codeblock>ij> <b>connect 'jdbc:derby:wombat;rollForwardRecoveryFrom=/backup/wombat;
logDevice=/databases/brokenwombat';</b>
ij> <b>select * from t1;</b>
A          
-----------
19         

1 row selected
---------------DML/DDL Operations</codeblock>
<p>After a database is restored from full backup, transactions from the online
archived logs and active logs are replayed. This brings the database to its most
recent state. All the log files should be in the directory specified by the
<codeph>logDevice=<i>logDirectoryPath</i></codeph> attribute.</p>
</li>
</ol>
<p>For more information, see "rollForwardRecoveryFrom=path attribute" and
"logDevice=logDirectoryPath attribute" in the
<ph conref="../conrefs.dita#pub/citref"></ph>.</p>
</section>
</conbody>
</concept>
