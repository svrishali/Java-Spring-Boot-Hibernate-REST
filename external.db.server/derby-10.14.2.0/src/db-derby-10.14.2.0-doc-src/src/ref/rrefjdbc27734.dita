<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<reference id="rrefjdbc27734" xml:lang="en-us">
<title>java.sql.Connection interface</title>
<shortdesc>A
<ph conref="../conrefs.dita#prod/productshortname"></ph>&nbsp;<i>Connection</i>
object is not garbage-collected until all other JDBC objects created from that
connection are closed or are themselves garbage-collected.</shortdesc>
<prolog><metadata>
<keywords><indexterm>java.sql.Connection interface</indexterm>
<indexterm>Connections<indexterm>session-severity exceptions closing</indexterm></indexterm>
<indexterm>Connections<indexterm>system-severity exceptions closing</indexterm></indexterm>
<indexterm>Connections<indexterm>garbage collection of</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section><p>Once the connection is closed, no further JDBC requests can be made
against objects created from the connection. Do not explicitly close the
<i>Connection</i> object until you no longer need it for executing
statements.</p></section>
<section>
<p>The <i>Connection</i> interface extends <i>AutoCloseable</i> in JDK 7 and
after. If you declare a connection in a <i>try</i>-with-resources statement and
there is an error that the code does not catch, the JRE will attempt to close
the connection automatically.</p>
<p>Note that a transaction-severity or higher exception causes
<ph conref="../conrefs.dita#prod/productshortname"></ph> to abort an in-flight
transaction. But a statement-severity exception does NOT roll back the
transaction. Also note that
<ph conref="../conrefs.dita#prod/productshortname"></ph> throws an exception if
an attempt is made to close a connection with an in-flight transaction. Suppose
now that a <i>Connection</i> is declared in a <i>try</i>-with-resources
statement, a transaction is in-flight, and an unhandled statement-severity error
occurs inside the <i>try</i>-with-resources block. In this situation,
<ph conref="../conrefs.dita#prod/productshortname"></ph> will raise a follow-on
exception as the JRE exits the <i>try</i>-with-resources block. (For details on
error severity levels, see
<i><xref href="rrefproper26985.dita#rrefproper26985"></xref></i>.)</p>
<p>It is therefore always best to catch errors inside the
<i>try</i>-with-resources block and to either roll back or commit, as
appropriate, to ensure that there is no pending transaction when leaving the
<i>try</i>-with-resources block. This action also improves application
portability, since DBMSs differ in their semantics when trying to close a
connection with a pending transaction.</p>
</section>
<section>
<p>The following table describes features of <i>Connection</i> methods that are
specific to <ph conref="../conrefs.dita#prod/productshortname"></ph>.</p>
<table>
<title>Implementation notes on <i>Connection</i> methods</title>
<desc>This table describes the implementation-specific features of <i>Connection</i> methods, providing the return type and signature for each method.</desc>
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="1" colnum="1" colwidth="30*"/>
<colspec colname="2" colnum="2" colwidth="40*"/>
<colspec colname="3" colnum="3" colwidth="30*"/>
<thead>
<row valign="bottom">
<entry colname="1">Returns</entry>
<entry colname="2">Signature</entry>
<entry colname="3">Implementation Notes</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="1"><i>PreparedStatement</i></entry>
<entry colname="2"><i>prepareStatement(String sql, int [] columnIndexes)</i></entry>
<entry colname="3">Every column index in the array must correlate to an 
<xref href="rrefsqlj37836.dita#rrefsqlj37836">auto-increment</xref>
column within the target table of the INSERT.</entry>
</row>
<row>
<entry colname="1"><i>PreparedStatement</i></entry>
<entry colname="2"><i>prepareStatement(String sql, String [] columnNames)</i></entry>
<entry colname="3">Every column name in the array must designate an 
<xref href="rrefsqlj37836.dita#rrefsqlj37836">auto-increment</xref>
column within the target table of the INSERT.</entry>
</row>
</tbody>
</tgroup>
</table>
<p>See <xref href="crefjavstateautogen.dita#crefjavstateautogen"></xref> for
details on the use of the two forms of the <i>Connection.prepareStatement</i>
method shown in this table.</p>
</section>
</refbody>
</reference>

