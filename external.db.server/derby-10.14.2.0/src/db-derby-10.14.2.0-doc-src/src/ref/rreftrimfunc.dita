<?xml version="1.0" encoding="utf-8"?>
 
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rreftrimfunc" xml:lang="en-us">
<title>TRIM function</title>
<shortdesc>The TRIM function takes a character expression and returns that
expression with leading and/or trailing pad characters removed.</shortdesc>
<prolog><metadata>
<keywords><indexterm>functions<indexterm>TRIM</indexterm></indexterm>
<indexterm>TRIM function</indexterm></keywords>
</metadata></prolog>
<refbody>
<section><p>Optional parameters indicate whether leading, or trailing, or both
leading and trailing pad characters should be removed, and specify the pad
character that is to be removed.</p></section>
<refsyn><title>Syntax</title>
<codeblock><b>TRIM( [ <xref
href="rreftrimfunc.dita#rreftrimfunc/trimOp"><i>trimOperands</i></xref> ] <i>trimSource</i> )</b></codeblock> 
<p>The <i>trimSource</i> is a <i>characterExpression</i>.</p>
</refsyn>
<section id="trimOp"><title>trimOperands</title>
<codeblock><b>{ <xref
href="rreftrimfunc.dita#rreftrimfunc/trimTy"><i>trimType</i></xref> [ <i>trimCharacter</i> ] FROM | <i>trimCharacter</i> FROM }</b></codeblock>
<p>The <i>trimCharacter</i> is a <i>characterExpression</i>.</p>
</section>
<section id="trimTy"><title>trimType</title>
<codeblock><b>{ LEADING | TRAILING | BOTH }</b></codeblock>
</section>
<section>
<p>If <i>trimType</i> is not specified, it defaults to BOTH. If <i>trimCharacter</i> is not specified, it will default to the space character (' ').  Otherwise the <i>trimCharacter</i> expression must evaulate to one of the following:
	<ul>
	    <li>A character string whose length is exactly one</li>
	    <li>NULL</li>
	</ul>
</p><p>
If either <i>trimCharacter</i> or <i>trimSource</i> evaluates to NULL, the result of the TRIM function is NULL.  Otherwise, the result of the TRIM function is defined as follows:
	<ul>
	<li>If <i>trimType</i> is LEADING, the result will be the <i>trimSource</i> value with all leading occurrences of <i>trimCharacter</i> removed.</li>
	<li>If <i>trimType</i> is TRAILING, the result will be the <i>trimSource</i> value with all trailing occurrences of <i>trimCharacter</i> removed.</li>
	<li>If <i>trimType</i> is BOTH, the result will be the <i>trimSource</i> value with all leading <i>and</i> trailing occurrences of <i>trimCharacter</i> removed.</li>
	</ul>
</p><p>
If <i>trimSource</i>'s data type is CHAR or VARCHAR, the return type of the TRIM function will be VARCHAR. Otherwise the return type of the TRIM function will be CLOB.
</p>
</section>
<example><title>Examples</title>
<p>
<codeblock><b><ph>-- returns 'derby' (no spaces)</ph>
VALUES TRIM('  derby ')</b></codeblock> 
</p><p>
<codeblock><b><ph>-- returns 'derby' (no spaces)</ph>
VALUES TRIM(BOTH ' ' FROM '  derby ')</b></codeblock> 
</p><p>
<codeblock><b><ph>-- returns 'derby ' (with a space at the end)</ph>
VALUES TRIM(LEADING ' ' FROM '  derby ')</b></codeblock> 
</p><p>
<codeblock><b><ph>-- returns '  derby' (with two spaces at the beginning)</ph>
VALUES TRIM(TRAILING ' ' FROM '  derby ')</b></codeblock> 
</p><p>
<codeblock><b><ph>-- returns NULL</ph>
VALUES TRIM(cast (null as char(1)) FROM '  derby ')</b></codeblock> 
</p><p>
<codeblock><b><ph>-- returns NULL</ph>
VALUES TRIM(' ' FROM cast(null as varchar(30)))</b></codeblock> 
</p><p>
<codeblock><b><ph>-- returns ' derb' (with a space at the beginning)</ph>
VALUES TRIM('y' FROM ' derby')</b></codeblock> 
</p><p>
<codeblock><b><ph>-- results in an error because <i>trimCharacter</i> can only be 1 character</ph>
VALUES TRIM('by' FROM ' derby')</b></codeblock> 
</p>
</example>
</refbody>
</reference>
