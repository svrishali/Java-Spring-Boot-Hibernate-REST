<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefjta18596" xml:lang="en-us">
<title>javax.sql: JDBC interfaces</title>
<shortdesc><ph conref="../conrefs.dita#prod/productshortname"></ph> implements
a number of JDBC interfaces for Java EE compliance.</shortdesc>
<prolog><metadata>
<keywords><indexterm>javax.sql package</indexterm>
<indexterm>javax.sql.PooledConnection</indexterm>
<indexterm>Connection pooling</indexterm><indexterm>javax.sql.DataSource</indexterm>
<indexterm>Data sources</indexterm><indexterm>javax.sql.XAConnection</indexterm>
<indexterm>javax.sql.XADataSource</indexterm><indexterm>Data sources<indexterm>creating
a database for</indexterm></indexterm><indexterm>Data sources<indexterm>shutting
down a database for</indexterm></indexterm></keywords>
</metadata></prolog>
<refbody>
<section><p>For more details about these interfaces, see the API documentation
for your version of the Java Development Kit, which you can find at
<xref format="html" href="http://docs.oracle.com/javase/"
scope="external">http://docs.oracle.com/javase/</xref>.
<ul>
<li id="jta20722"><i>javax.sql.DataSource</i> <p>An interface that is a factory
for connections to the physical data source that the object represents. An
object that implements the DataSource interface will typically be registered
with a naming service based on the Java Naming and Directory (JNDI) API. The
<i>org.apache.derby.jdbc</i> DataSource classes support the JNDI API, with the
exception of the DataSource classes that support Java SE 8 Compact Profile 2.
See <xref href="rrefapi1003363.dita#rrefapi1003363"></xref> and
<xref href="rrefjdbc4_2compactprofiles.dita#rrefjdbc4_2compactprofiles"></xref>
for more information.</p></li>
<li id="jta96573"><i>javax.sql.ConnectionPoolDataSource</i> and
<i>javax.sql.PooledConnection</i>  <p>Establishing a connection to the database
can be a relatively expensive operation in client/server environments.
Establishing the connection once and then using the same connection for multiple
requests can dramatically improve the performance of a database.</p>
<p>The <ph conref="../conrefs.dita#prod/productshortname"></ph> implementation
of the <i>ConnectionPoolDataSource</i> and <i>PooledConnection</i> interfaces
allows a connection pool server to maintain a set of such connections to the
resource manager (<ph conref="../conrefs.dita#prod/productshortname"></ph>). In
an embedded environment, connections are much cheaper and connection pooling is
not necessary.</p></li>
<li id="jta18170"><i>javax.sql.XAConnection</i>   <p>An <i>XAConnection</i>
produces an <i>XAResource</i>, and, over its lifetime, many <i>Connections</i>.
This type of connection allows for distributed transactions.</p></li>
<li id="jta88962"><i>javax.sql.XADataSource</i>   <p>An <i>XADataSource</i> is
simply a <i>ConnectionPoolDataSource</i> that produces <i>XAConnections</i>.</p></li>
</ul></p></section>
<section><p>In addition,
<ph conref="../conrefs.dita#prod/productshortname"></ph> provides three methods
for <i>XADataSource</i>, <i>DataSource</i>, and <i>ConnectionPoolDataSource</i>.
<ph conref="../conrefs.dita#prod/productshortname"></ph> supports a number of
additional data source properties:</p>   <ul>
<li><i>setCreateDatabase(String create)</i>   <p>Sets a property to create a
database at the next connection. The string argument must be "create".</p></li>
<li><i>setShutdownDatabase(String shutdown)</i>   <p>Sets a property to shut
down a database. Shuts down the database at the next connection. The string
argument must be "shutdown".</p></li>
</ul> <note>Set these properties before getting the connection.</note>
</section>
</refbody>
</reference>
