<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefscalarsubquery" xml:lang="en-us">
<title>scalarSubquery</title>
<shortdesc>A <i>scalarSubquery</i>, sometimes called an expression subquery, is
a subquery that evaluates to a single row with a single column.</shortdesc>
<prolog><metadata>
<keywords><indexterm>scalarSubquery</indexterm>
<indexterm>expression subquery</indexterm></keywords>
</metadata></prolog>
<refbody>
<section> <p>You can place a <i>scalarSubquery</i> anywhere an <i>expression</i>
is permitted. A <i>scalarSubquery</i> turns a
<i><xref href="rrefselectexpression.dita">selectExpression</xref></i> result
into a scalar value because it returns only a single row and column value.</p>
</section>
<refsyn><title>Syntax</title>
<codeblock><b>( <i><xref href="rrefsqlj21571.dita#rrefsqlj21571">query</xref></i>
    [ <i><xref href="rrefsqlj13658.dita#rrefsqlj13658">ORDER BY clause</xref></i> ]
    [ <i><xref href="rrefsqljoffsetfetch.dita#rrefsqljoffsetfetch">result offset clause</xref></i> ]
    [ <i><xref href="rrefsqljoffsetfetch.dita#rrefsqljoffsetfetch">fetch first clause</xref></i> ]
)</b></codeblock>
</refsyn>
<example><title>Examples</title><codeblock><b><ph>-- avg always returns a single value, so the subquery is
-- a scalarSubquery</ph>
SELECT NAME, COMM
  FROM STAFF
  WHERE EXISTS
    (SELECT AVG(BONUS + 800)
       FROM EMPLOYEE
       WHERE COMM &lt; 5000
       AND EMPLOYEE.LASTNAME = UPPER(STAFF.NAME)
)
<ph>-- Introduce a way of "generating" new data values,
-- using a query which selects from a VALUES clause (which is an 
-- alternate form of a fullselect). 
-- This query shows how a table can be derived called "X" having 
-- 1 column "R1" and 1 row of data.
SELECT R1 
	FROM (VALUES('GROUP 1')) AS X(R1)</ph>
</b></codeblock> </example>
</refbody>
</reference>
