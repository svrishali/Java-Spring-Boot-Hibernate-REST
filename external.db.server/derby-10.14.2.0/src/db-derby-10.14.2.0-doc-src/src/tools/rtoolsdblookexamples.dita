<?xml version="1.0" encoding="utf-8"?>
 
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rtoolsdblookexamples" xml:lang="en-us">
<title>dblook examples</title>
<shortdesc>The following examples demonstrate how the various
<codeph>dblook</codeph> utility options can be specified from a command line.
These examples use the <codeph>sample</codeph> database.</shortdesc>
<prolog><metadata>
<keywords><indexterm>dblook<indexterm>examples</indexterm></indexterm>
<indexterm>examples<indexterm>dblook</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section>
<note>The quotation marks shown in these examples are part of the command
argument and must be passed to <codeph>dblook</codeph>. The way in which
quotation marks are passed depends on the operating system and command line that
you are using. With some systems it might be necessary to escape the quotation
marks by using a forward slash before the quotation mark. For example:
<codeblock>"\"My Table"\"</codeblock></note>
<p>Status messages are written to the output (either a
<codeph>-o <i>filename</i></codeph>, if specified, or the console) as SQL script
comments. These status messages serve as headers to show which types of database
objects are being, or have been, processed by the <codeph>dblook</codeph>
utility.</p>
</section>
<example><title>Writing the DDL to the console</title>
<p>You can write the DDL to the console for everything that is in the
<codeph>sample</codeph> database. In this example, the database is in the
current directory. For example:</p>
<codeblock><b>java org.apache.derby.tools.dblook -d jdbc:derby:sample</b></codeblock>
</example>
<example><title>Including error and warning messages in the dblook command</title>
<p>You can write error and warning messages when you write the DDL to the
console. The messages are written using <codeph>System.err</codeph>. For
example:</p>
<codeblock><b>java org.apache.derby.tools.dblook -d jdbc:derby:sample -verbose</b></codeblock>
</example>
<example><title>Writing the DDL to a file</title>
<p>You can write the DDL to a file called <codeph>myDB_DDL.sql</codeph> for
everything that is in the <codeph>sample</codeph> database. In this example, the
database and file are in the current directory. For example:</p>
<codeblock><b>java org.apache.derby.tools.dblook -d jdbc:derby:sample -o myDB_DDL.sql</b></codeblock>
</example>
<example><title>Specifying directory paths in the dblook command</title>
<p>If the database or file is not in the current directory, you must specify the
directory path. For example:</p>
<codeblock><b>java org.apache.derby.tools.dblook -d 'jdbc:derby:c:\private\stuff\sample'
   -o 'C:\temp\newDB.sql'</b></codeblock>
</example>
<example><title>Specifying a schema in the dblook command</title>
<p>You can specify the schema for the database. To write the DDL to the console,
for all of the objects in the <codeph>sample</codeph> database where the
database is in the SAMP schema, use the following command:</p>
<codeblock><b>java org.apache.derby.tools.dblook -d jdbc:derby:sample -z samp</b></codeblock>
</example>
<example><title>Specifying a remote database and host</title>
<p>If the <codeph>sample</codeph> database is in the SAMP schema on
<codeph>localhost:1527</codeph>, you must specify your user ID and password. For
example, use the following command to write the DDL to the console:</p>
<codeblock><b>java org.apache.derby.tools.dblook
   -d 'jdbc:derby://localhost:1527/"C:\temp\sample";
   user=someusername;password=somepassword' -z samp</b></codeblock>
</example>
<example><title>Specifying a schema and a table within the database in the
dblook command</title>
<p>You can specify that only the objects in the <codeph>sample</codeph> database
that are associated with the SAMP and the <codeph>My Table</codeph> table are
written to the console. For example:</p>
<codeblock><b>java org.apache.derby.tools.dblook -d jdbc:derby:sample -z samp -t "My Table"</b></codeblock>
</example>
<example><title>Specifying multiple tables in the dblook command</title>
<p>You can specify more than one table in the <codeph>dblook</codeph> command by
separating the names of the tables with a space. For example, for objects in the
<codeph>sample</codeph> database that are associated with either the
<codeph>My Table</codeph> table or the <codeph>STAFF</codeph> table, use the
following command:</p>
<codeblock><b>java org.apache.derby.tools.dblook -d jdbc:derby:sample -t "My Table" staff</b></codeblock>
</example>
<example><title>Writing DDL to a file without a statement delimiter</title>
<p>To write the DDL for all of the objects in the <codeph>sample</codeph>
database to the <codeph>myDB_DDL.sql</codeph> file without a statement
delimiter, you must omit the default semicolon. You can append the DDL to the
output files if the files are already there. For example:</p>
<codeblock><b>java org.apache.derby.tools.dblook -d jdbc:derby:sample
   -o myDB_DDL.sql -td '' -append</b></codeblock>
</example>
<example><title>Excluding views from the DDL</title>
<p>To write the DDL to the console for all of the objects in the
<codeph>sample</codeph> database except for views, use the following
command:</p>
<codeblock><b>java org.apache.derby.tools.dblook -d jdbc:derby:sample -noview</b></codeblock>
</example>
</refbody>
</reference>
