<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "../dtd/reference.dtd">
<reference xml:lang="en-us" id="rtuntransform866547">
<title>Transitive closure on join clauses</title>
<shortdesc>When a join statement selects from three or more tables,
<ph conref="../conrefs.dita#prod/productshortname"></ph> analyzes any equijoin
predicates between simple column references within each query block and adds
additional equijoin predicates where possible if they do not currently
exist.</shortdesc>
<prolog>
</prolog>
<refbody>
<section>
<p>See <xref href="ctuntransform13966.dita#ctuntransform13966/rtuntransform36163">equijoin
predicate</xref> and
<xref href="ctuntransform13966.dita#ctuntransform13966/rtuntransform13785">simple
column reference</xref> for definitions. For example,
<ph conref="../conrefs.dita#prod/productshortname"></ph> transforms the
following query:</p>
<codeblock><b>SELECT * FROM samp.employee e, samp.emp_act a, samp.emp_resume r
WHERE e.empno = a.empno
and a.empno = r.empno</b></codeblock>
<p>into the following:</p>
<codeblock><b>SELECT * FROM samp.employee e, samp.emp_act a, samp.emp_resume r
WHERE e.empno = a.empno
and a.empno = r.empno
and e.empno = r.empno</b></codeblock>
<p>On the other hand, the optimizer knows that one of these equijoin predicates
is redundant and will throw out the one that is least useful for
optimization.</p>
</section>
</refbody></reference>
