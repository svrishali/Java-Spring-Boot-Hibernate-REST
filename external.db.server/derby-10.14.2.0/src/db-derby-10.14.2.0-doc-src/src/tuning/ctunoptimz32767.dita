<?xml version="1.0" encoding="utf-8"?>
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "../dtd/concept.dtd">
<concept xml:lang="en-us" id="ctunoptimz32767">
<title>Join order case study</title>
<shortdesc>As an example of how the optimizer chooses a join order, consider the
following situation.</shortdesc>
<prolog>
</prolog>
<conbody>
<p>The <codeph>Flights</codeph> table (as you know) stores information about
flight segments. It has a primary key on the <codeph>flight_id</codeph> and
<codeph>segment_number</codeph> columns. This primary key constraint is backed
up by a unique index on those columns.</p>
<p>The <codeph>FlightAvailability</codeph> table, which stores information about
the availability of flight segments on particular days, can store several rows
for a particular row in the <codeph>Flights</codeph> table (one for each
date).</p>
<p>You want to see information about all the flights, and you issue the
following query:</p>
<codeblock><b>SELECT *
FROM FlightAvailability AS fa, Flights AS fts
WHERE fa.flight_id = fts.flight_id
AND fa.segment_number = fts.segment_number</b></codeblock>
<p>First imagine the situation in which there are no useful indexes on the
<codeph>FlightAvailability</codeph> table.</p>
<p>Using the join order with <codeph>FlightAvailability</codeph> as the outer
table and <codeph>Flights</codeph> as the inner table is cheaper because it
allows the <codeph>flight_id</codeph>/<codeph>segment_number</codeph> columns
from <codeph>FlightAvailability</codeph> to be used to probe into and find
matching rows in <codeph>Flights</codeph>, using the primary key index on
<codeph>Flights.flight_id</codeph> and
<codeph>Flights.segment_number</codeph>.</p>
<p>This is preferable to the opposite join order (with <codeph>Flights</codeph>
as the outer table and <codeph>FlightAvailability</codeph> as the inner table)
because in that case, for each row in <codeph>Flights</codeph>, the system would
have to scan the entire <codeph>FlightAvailability</codeph> table to find the
matching rows (because there is no useful index -- an index on the
<codeph>flight_id</codeph>/<codeph>segment_number</codeph> columns).</p>
<p>Second, imagine the situation in which there is a useful index on the
<codeph>FlightAvailability</codeph> table (this is actually the case in the
sample database). <codeph>FlightAvailability</codeph> has a primary key index on
<codeph>flight_id</codeph>, <codeph>segment_number</codeph>, and
<codeph>booking_date</codeph>. In that index, the
<codeph>flight_id</codeph>/<codeph>segment_number</codeph> combination is not
unique, since there is a one-to-many correspondence between the
<codeph>Flights</codeph> table and the <codeph>FlightAvailability</codeph>
table. However, the index is still very useful for finding rows with particular
<codeph>flight_id</codeph>/<codeph>segment_number</codeph> values.</p>
<p>You issue the same query:</p>
<codeblock><b>SELECT *
FROM FlightAvailability AS fa, Flights AS fts
WHERE fa.flight_id = fts.flight_id
AND fa.segment_number = fts.segment_number</b></codeblock>
<p>Although the difference in cost is smaller, it is still cheaper for the
<codeph>Flights</codeph> table to be the inner table, because its index is
unique, whereas <codeph>FlightAvailability</codeph>'s index is not. That is
because it is cheaper for
<ph conref="../conrefs.dita#prod/productshortname"></ph> to step through a
unique index than through a non-unique index.</p>
</conbody></concept>
