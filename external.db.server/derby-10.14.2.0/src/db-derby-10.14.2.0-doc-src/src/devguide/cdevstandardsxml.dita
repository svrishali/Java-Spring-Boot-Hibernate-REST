<?xml version="1.0" encoding="utf-8"?>
 
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevstandardsxml" xml:lang="en-us">
<title>XML data types and operators</title>
<shortdesc><ph conref="../conrefs.dita#prod/productshortname"></ph> supports
the XML data type and a set of operators that work with the XML data type,
but does not provide JDBC support for the XML data type.
The XML data type and operators are based on a small subset of the SQL/XML
specification. </shortdesc>
<prolog><metadata>
<keywords><indexterm>SQL standards<indexterm>XML data types and operators</indexterm></indexterm>
<indexterm>XML data types<indexterm>SQL standard</indexterm></indexterm><indexterm>XML
data types<indexterm>limitations</indexterm></indexterm></keywords>
</metadata></prolog>
<conbody>
<p>The XML data type and operators are defined only in the SQL layer.</p>
<p>There is no JDBC-side support for XML data types. It is not possible to
bind directly into an XML value or to retrieve an XML value directly from
a result set.  Instead, you must bind and retrieve the XML data as Java strings
or character streams by explicitly specifying the appropriate XML operator
as part of the SQL statements:</p>
<ul>
<li>Create a table with a XML data typed column. For example:
     <codeblock>CREATE TABLE xml_data(xml_col XML);</codeblock>
</li>
<li>Use the XMLPARSE operator for binding data into XML values. For example:
<codeblock>INSERT INTO xml_data(xml_col) 
  VALUES(XMLPARSE(DOCUMENT ' &lt;name&gt; Derby &lt;/name&gt;' PRESERVE WHITESPACE));</codeblock>
<note>You must insert the XML keywords DOCUMENT and PRESERVE WHITESPACE.
Actual XML data should be inside single quotation marks, and
values should be within the starting XML tag and the ending XML tag.</note>                 
</li>
<li>Use the XMLSERIALIZE operator to retrieve XML values from a result set.
For example:
<codeblock>SELECT XMLSERIALIZE(xml_col AS CLOB) FROM xml_data;</codeblock> 
<note>You can also specify <codeph>xml_col AS VARCHAR(25)</codeph>.</note>    
</li>
<li>Use non-XML data retrieved from a non-XML column to create an XML fragment.
For example: <codeblock>     SELECT '&lt;my_self&gt;' ||     
     '&lt;name&gt;'|| my_name ||'&lt;/name&gt;' ||                 
     '&lt;age&gt;'|| TRIM(CHAR(my_age)) ||'&lt;/age&gt;'||                 
     '&lt;/my_self&gt;'                       
     FROM my_non_xml_table;</codeblock>
<note>This will result in XML fragments, which you must plug
into an XML document.</note>
</li></ul>
<p>Additionally, there is no JDBC metadata support for the XML data type.</p>
<p>The XML data type is not allowed in any of the clauses or operations that
are described in the section on expressions on LONG data types in 
<xref href="cdevstandards806118.dita#cdevstandards806118"></xref>.</p>
<p>For the XML operators to work properly,
<ph conref="../conrefs.dita#prod/productshortname"></ph> requires that the
Java Virtual Machine (JVM) have working implementations of the
<i>javax.xml.parsers.DocumentBuilderFactory</i> and
<i>javax.xml.xpath.XPathFactory</i> classes. All supported JVMs implement these
classes.</p>
</conbody>
</concept>
