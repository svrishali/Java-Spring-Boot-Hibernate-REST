<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevspecialtfcontext" xml:lang="en-us">
<title>Writing context-aware table functions</title>
<shortdesc>A context-aware table function is able to access context information
that is passed in to it from
<ph conref="../conrefs.dita#prod/productshortname"></ph>.</shortdesc>
<prolog><metadata>
<keywords>
<indexterm>functions<indexterm>context-aware table functions</indexterm></indexterm>
</keywords>
</metadata></prolog>
<conbody>
<p>Context-aware table functions are useful when both of the following are the
case:
<ul>
<li>You want to bind a single Java method to many table functions, each of which
has a different row shape.</li>
<li>You are able to determine the row shape, at runtime, from the
schema-qualified name of the table function which is being invoked.</li>
</ul></p>
<p>A context-aware table function makes use of the
<i>org.apache.derby.vti.AwareVTI</i> interface and the
<i>org.apache.derby.vti.VTIContext</i> class. The <i>VTIContext</i> class, which
can be accessed through the <i>AwareVTI</i> interface, provides methods that
return the unqualified table function name, the name of the schema which holds
the table function, and the text of the statement which invoked the table
function. See the <ph conref="../conrefs.dita#prod/productshortname"></ph>
public API documentation for more information about <i>AwareVTI</i> and
<i>VTIContext</i>.</p>
<p>For example, the <i>ArchiveVTI</i> table function performs a task
which many users have found useful: it provides a union of a main table with a 
set of archive tables. The archive tables are created at regular intervals. When
a new archive table is created, the oldest rows from the main table are moved to
the archive table.</p>
<p>To use the <i>ArchiveVTI</i> table function, you need to include
<i>derbyTesting.jar</i> in your classpath along with other
<ph conref="../conrefs.dita#prod/productshortname"></ph> jar files.</p>
<p>The following series of commands shows how to use the <i>archiveVTI</i>
method, which is included in the
<ph conref="../conrefs.dita#prod/productshortname"></ph> test code. The source
code for the <i>ArchiveVTI</i> class is provided in the next topic.
</p>
<p>In this
example, the method is bound to two table functions; one function returns a
three-column table, the other a two-column table.</p>
<codeblock><b>java org.apache.derby.tools.ij</b>
ij version 10.11
ij> <b>connect 'jdbc:derby:memory:db;create=true';</b>
ij> <b>create table t1
(
    keyCol int,
    aCol int,
    bCol int
);</b>
0 rows inserted/updated/deleted
ij> <b>create table t1_archive_001 as select * from t1 with no data;</b>
0 rows inserted/updated/deleted
ij> <b>create table t1_archive_002 as select * from t1 with no data;</b>
0 rows inserted/updated/deleted
ij> <b>insert into t1_archive_002 values ( 1, 100, 1000 ), ( 2, 200, 2000 ),
    ( 3, 300, 3000 );</b>
3 rows inserted/updated/deleted
ij> <b>insert into t1_archive_001 values ( 4, 400, 4000 ), ( 5, 500, 5000 ),
    ( 6, 600, 6000 );</b>
3 rows inserted/updated/deleted
ij> <b>insert into t1 values ( 7, 700, 7000 ), ( 8, 800, 8000 ), 
    ( 9, 900, 9000 );</b>
3 rows inserted/updated/deleted
ij> <b>create table t2
(
    keyCol int,
    aCol int
);</b>
0 rows inserted/updated/deleted
ij> <b>create table t2_arc_001 as select * from t2 with no data;</b>
0 rows inserted/updated/deleted
ij> <b>create table t2_arc_002 as select * from t2 with no data;</b>
0 rows inserted/updated/deleted
ij> <b>insert into t2_arc_002 values ( 1, 100 ), ( 2, 200 ),  ( 3, 300 );</b>
3 rows inserted/updated/deleted
ij> <b>insert into t2_arc_001 values ( 4, 400 ), ( 5, 500 ),  ( 6, 600 );</b>
3 rows inserted/updated/deleted
ij> <b>insert into t2 values ( 7, 700 ), ( 8, 800 ), ( 9, 900 );</b>
3 rows inserted/updated/deleted
ij> <b>create function t1( archiveSuffix varchar( 32672 ) ) returns table
(
    keyCol int,
    aCol int,
    bCol int
)
language java parameter style derby_jdbc_result_set reads sql data
external name 
'org.apache.derbyTesting.functionTests.tests.lang.ArchiveVTI.archiveVTI';</b>
0 rows inserted/updated/deleted
ij> <b>create function t2( archiveSuffix varchar( 32672 ) ) returns table
(
    keyCol int,
    aCol int
)
language java parameter style derby_jdbc_result_set reads sql data
external name 
'org.apache.derbyTesting.functionTests.tests.lang.ArchiveVTI.archiveVTI';</b>
0 rows inserted/updated/deleted
ij> <b>select * from table( t1( '_ARCHIVE_' ) ) s
where keyCol between 3 and 7
order by keyCol;</b>
KEYCOL     |ACOL       |BCOL       
-----------------------------------
3          |300        |3000       
4          |400        |4000       
5          |500        |5000       
6          |600        |6000       
7          |700        |7000       
      
5 rows selected
ij> <b>select * from table( t2( '_ARC_' ) ) s
where keyCol between 3 and 7
order by keyCol;</b>
KEYCOL     |ACOL       
-----------------------
3          |300        
4          |400        
5          |500        
6          |600        
7          |700        

5 rows selected</codeblock>
</conbody>
</concept>
