<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="csecembeddedperms" xml:lang="en-us">
<title>Running embedded <ph conref="../conrefs.dita#prod/productshortname"></ph>
 with a security manager</title>
<shortdesc>This section describes the permissions that should be granted to the
codebase <codeph>derby.jar</codeph> to allow you to run embedded <ph
conref="../conrefs.dita#prod/productshortname"></ph> with a security
manager.</shortdesc>
<prolog><metadata>
<keywords>
<indexterm>permissions<indexterm>granting to derby.jar</indexterm></indexterm>
</keywords>
</metadata></prolog>
<conbody>
<p>These permissions are also needed to run the Network Server, but the Network
Server requires additional permissions as well.</p>
<p>These permissions are listed approximately in the order shown in <xref
href="rsecpolicysample.dita"/>. Some of the optional permissions are not
included in <xref href="rsecpolicysample.dita"/>.</p>
<section><title>Mandatory permissions</title><dl>
<dlentry>
<dt>permission java.lang.RuntimePermission "createClassLoader"</dt>
<dd>Mandatory. It allows
<ph conref="../conrefs.dita#prod/productshortname"></ph> to execute SQL queries
and supports loading class files from jar files stored in the database.</dd>
</dlentry>
<dlentry>
<dt>permission org.apache.derby.security.SystemPermission "engine", "usederbyinternals"</dt>
<dd>Mandatory. It allows <ph conref="../conrefs.dita#prod/productshortname"></ph> to access sensitive structures which application code should not touch.</dd>
</dlentry>
<dlentry>
<dt>permission java.util.PropertyPermission "derby.*", "read"</dt>
<dd>Allows <ph conref="../conrefs.dita#prod/productshortname"></ph> to read
individual <ph conref="../conrefs.dita#prod/productshortname"></ph> properties
set in the JVM system properties. If the action is denied, the properties set in
the JVM system properties are ignored.</dd>
</dlentry>
</dl></section>
<section><title>Optional permissions</title><dl><dlentry>
<dt>permission java.util.PropertyPermission "user.dir", "read"</dt>
<dd>Permits access to the system directory value if
<codeph>derby.system.home</codeph> is not set or no permission has been granted
to read the <codeph>derby.system.home</codeph> property.</dd>
</dlentry><dlentry>
<dt>permission java.util.PropertyPermission "sun.arch.data.model", "read"</dt>
<dd>If set by the JVM, this is the definite answer to whether the system is
32-bit or 64-bit.</dd>
</dlentry><dlentry>
<dt>permission java.util.PropertyPermission "os.arch", "read"</dt>
<dd>Used by <ph conref="../conrefs.dita#prod/productshortname"></ph> to
determine if the system is 32-bit or 64-bit, if the system property
<codeph>sun.arch.data.model</codeph> isn't set by the JVM.
<ph conref="../conrefs.dita#prod/productshortname"></ph> has to recognize the
value of <codeph>os.arch</codeph> to determine if the system is 32-bit or
64-bit, and if the value isn't recognized, a heuristic will be used
instead.</dd>
</dlentry><dlentry>
<dt>permission java.io.FilePermission "${derby.system.home}", "read,write"</dt>
<dd>Allows <ph conref="../conrefs.dita#prod/productshortname"></ph> to determine
the system directory when it is set by <codeph>derby.system.home</codeph> and
create it if needed. If the system directory already exists, only the "read"
permission needs to be granted.</dd>
</dlentry><dlentry>
<dt>permission java.io.FilePermission "${derby.system.home}${/}derby.properties",
"read"</dt>
<dd>Allows <ph conref="../conrefs.dita#prod/productshortname"></ph> to read the
system properties file from the system directory.</dd>
</dlentry><dlentry>
<dt>permission java.io.FilePermission "${derby.system.home}${/}derby.log",
"read,write,delete"</dt>
<dt>permission java.io.FilePermission "${user.dir}${/}derby.log",
"read,write,delete";</dt>
<dd>Only one of these permissions is needed. Permits the application to read,
write, and delete to the
<ph conref="../conrefs.dita#prod/productshortname"></ph> log file, unless the
log has been redirected. (See the <codeph>derby.stream.error</codeph> properties
in the <ph conref="../conrefs.dita#pub/citref"></ph> for more information.) If
one of the requested valid actions is denied, the
<ph conref="../conrefs.dita#prod/productshortname"></ph> log will be
<codeph>java.lang.System.err</codeph>.</dd>
</dlentry><dlentry>
<dt>permission java.security.SecurityPermission "getPolicy"</dt>
<dd>You need this permission if you want to change the security policy on the
fly and reload it into a running system. Given this permission, a System
Administrator can reload the policy file by calling the
<codeph>SYSCS_UTIL.SYSCS_RELOAD_SECURITY_POLICY</codeph> system procedure, which
is described in the <ph conref="../conrefs.dita#pub/citref"></ph>.</dd>
</dlentry><dlentry>
<dt>permission javax.management.MBeanServerPermission "createMBeanServer";</dt>
<dd>Allows <ph conref="../conrefs.dita#prod/productshortname"></ph> to create an
MBean server. If the JVM running
<ph conref="../conrefs.dita#prod/productshortname"></ph> supports the platform
MBean server, <ph conref="../conrefs.dita#prod/productshortname"></ph> will
automatically try to create such a server if it does not already exist. For
details, see "Using Java Management Extensions (JMX) technology" in the
<ph conref="../conrefs.dita#pub/citadmin"></ph>.</dd>
</dlentry><dlentry>
<dt>permission javax.management.MBeanPermission 
"org.apache.derby.*#[org.apache.derby:*]", "registerMBean,unregisterMBean";</dt>
<dd>Allows <ph conref="../conrefs.dita#prod/productshortname"></ph> to register
and unregister its (JMX) MBeans. Such MBeans are associated with the domain
<codeph>org.apache.derby</codeph>, which is also the prefix of the fully
qualified class name of all
<ph conref="../conrefs.dita#prod/productshortname"></ph> MBeans. For more
information about the <ph conref="../conrefs.dita#prod/productshortname"></ph>
MBeans, refer to the public API documentation of the package
<codeph>org.apache.derby.mbeans</codeph> and its subpackages. It is possible to
fine-tune this permission (for example, to allow access only to certain MBeans).
To fine-tune this permission, see the API documentation for
<codeph>javax.management.MBeanPermission</codeph> or the JMX Instrumentation
and Agent Specification.</dd>
</dlentry><dlentry>
<dt>permission javax.management.MBeanTrustPermission "register";</dt>
<dd>Trusts <ph conref="../conrefs.dita#prod/productshortname"></ph> code to be
the source of MBeans and to register these in the MBean server.</dd>
</dlentry><dlentry>
<dt>permission java.lang.RuntimePermission "getProtectionDomain";</dt>
<dd>This permission is needed if you want classpath information to be printed to
<codeph>derby.log</codeph>.</dd>
</dlentry><dlentry>
<dt>permission java.sql.SQLPermission "callAbort";</dt>
<dd>Allows <ph conref="../conrefs.dita#prod/productshortname"></ph> code to call
the <codeph>java.sql.Connection.abort</codeph> method. This permission must be
granted both to the <ph conref="../conrefs.dita#prod/productshortname"></ph>
JDBC driver (by granting it to <codeph>derby.jar</codeph> and
<codeph>derbyclient.jar</codeph>) and to the application code that calls
<codeph>Connection.abort()</codeph>. Do not grant this permission to application
code unless you are certain that only superusers can invoke the code.</dd>
</dlentry><dlentry>
<dt>permission java.lang.RuntimePermission "accessUserInformation";</dt>
<dt>permission java.lang.RuntimePermission "getFileStoreAttributes";</dt>
<dd>These two permissions are needed when you are running with JDK 7 or higher
and when the secure file mask settings are active (that is, when
<codeph>derby.storage.useDefaultFilePermissions</codeph> is set to false, or
when the server has been started from the command line (in which case secure
file mask settings are active by default). See
<xref href="csecnetservfileperms.dita"/> for details.</dd>
</dlentry><dlentry>
<dt>permission java.net.SocketPermission "localhost:389", "connect,resolve";</dt>
<dd>Allows <ph conref="../conrefs.dita#prod/productshortname"></ph> code to
contact the LDAP server to perform authentication. This permission must be
granted to <codeph>derby.jar</codeph>. Port 389 is the default LDAP port.</dd>
</dlentry><dlentry>
<dt>permission java.lang.RuntimePermission "setContextClassLoader"</dt>
<dd>Allows <ph conref="../conrefs.dita#prod/productshortname"></ph> to set the
context class loader for long running threads to null to avoid potential for
class loader leaks in application server environments when the application
server starts <ph conref="../conrefs.dita#prod/productshortname"></ph> in a
custom class loader.</dd>
</dlentry><dlentry>
<dt>permission java.lang.RuntimePermission "getClassLoader"</dt>
<dd> This permission is also needed when setting the context class loader to
avoid class loader leaks. The class loader for the parent is saved and set to
null before creation of the thread and restored afterwards.</dd>
</dlentry><dlentry>
<dt>permission java.lang.RuntimePermission "getStackTrace";</dt>
<dt>permission java.lang.RuntimePermission "modifyThreadGroup";</dt>
<dd>These two permissions are needed to allow extended diagnostics, specifically
the stack traces of all threads, to be dumped to <codeph>derby.log</codeph> on
severe errors and when the
<codeph>derby.stream.error.extendedDiagSeverityLevel</codeph> property is set.
See the documentation of this property in the
<ph conref="../conrefs.dita#pub/citref"></ph> for details.</dd>
</dlentry><dlentry>
<dt>permission java.sql.SQLPermission "deregisterDriver";</dt>
<dd>Allows <ph conref="../conrefs.dita#prod/productshortname"></ph> to
deregister the driver. This permission is needed for system shutdown only on the
Java SE 8 platform and higher, if system shutdown is invoked without the
<codeph>deregister=false</codeph> connection URL attribute (see the
<ph conref="../conrefs.dita#pub/citref"></ph> for details).</dd>
</dlentry>
</dl>
</section>
<section><title>Combining permissions</title>
<p>The <xref href="rsecpolicysample.dita#rsecpolicysample"></xref>
combines several <codeph>derby.system.home</codeph> permissions into one
permission as follows:
<codeblock>permission java.io.FilePermission "${derby.system.home}/-", "read,write,delete";</codeblock>
This permission allows the
<ph conref="../conrefs.dita#prod/productshortname"></ph> engine complete access
to the system directory and any databases contained in the system directory.
You will probably want to restrict these liberal permissions, which allow the
server to backup/restore and export/import to or from any location in the local
file system.</p>
</section>
</conbody>
</concept>
