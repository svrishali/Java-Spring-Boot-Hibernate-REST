<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cseccsecure24366" xml:lang="en-us">
<title>Configuring database encryption</title>
<shortdesc><ph conref="../conrefs.dita#prod/productshortname"></ph> provides
a way for you to encrypt your data on disk.</shortdesc>
<prolog><metadata>
<keywords><indexterm>database encryption</indexterm>
<indexterm>databases<indexterm>encrypting</indexterm></indexterm>
</keywords>
</metadata></prolog>
<conbody>
<p>By default, <ph conref="../conrefs.dita#prod/productshortname"></ph> stores
its data unencrypted in ordinary operating system files. An attacker who can
view those files can simply type them out, exposing all sorts of data stored in
string columns. Knowing
<ph conref="../conrefs.dita#prod/productshortname"></ph>'s file formats, a
clever attacker could even view numeric data stored in those files. Even worse,
a clever attacker could change the data itself.</p>
<p>Fortunately, <ph conref="../conrefs.dita#prod/productshortname"></ph> can
encrypt databases. On a shared machine, that helps protect data from other
users, including disgruntled or curious superusers. Encryption helps protect
private financial data from thieves who physically steal your laptop.</p>
<p>Before encrypting a database, you need to make two choices:</p>
<ul>
<li>A <b>boot password</b>: This is the password that unlocks your encrypted
data when you want to use it.</li>
<li>An <b>encryption algorithm</b>: This is a transformation name as described
in the API documentation for the <codeph>javax.crypto.Cipher</codeph> class.
<ph conref="../conrefs.dita#prod/productshortname"></ph> encryption relies on
the JCE libraries supplied with the virtual machine. For more information on
those libraries, see the <cite>Java Cryptography Architecture (JCA) Reference
Guide</cite> (<xref format="html"
href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html"
scope="external"/>).</li>
</ul>
<p>Here is a <codeph>ij</codeph> command that creates an encrypted
database. Notice the additional attributes in bold on the database creation URL:
<codeph>dataEncryption</codeph>, <codeph>encryptionAlgorithm</codeph>, and
<codeph>bootPassword</codeph>. The URL string must be all on one line.</p>
<codeblock>connect 'jdbc:derby:myEncryptedDatabaseName;create=true;
<b>dataEncryption=true;encryptionAlgorithm=Blowfish/CBC/NoPadding;
bootPassword=mySuperSecretBootPassword</b>';
</codeblock>
<p>Once you have created an encrypted database, you can work in it. After you
shut down the encrypted database, you can reconnect to it by simply supplying
your boot password in the connection URL, as shown in the following 
<codeph>ij</codeph> command:</p>
<codeblock>connect 'jdbc:derby:myEncryptedDatabaseName;
<b>bootPassword=mySuperSecretBootPassword</b>';</codeblock>
<p>Keep in mind that by booting a database with its boot password, you unlock
the database for the lifetime of the virtual machine. This means that other
threads can connect to the database without supplying the boot password. This
situation lasts until the database is explicitly shut down or the virtual
machine exits. For a single-user, shrink-wrapped application, this is generally
not a problem. However, for a multi-user application, you need to take steps to
keep the data secure during the various stages of working with the database:</p>
<ol>
<li><b>Unlocking the database</b>: The boot password is used to initially
unlock encrypted data. Once the Database Owner has unlocked the database, other
users can connect to it without supplying the boot password.</li>
<li><b>Working with the database</b>: For that reason, you should configure
<ph conref="../conrefs.dita#prod/productshortname"></ph> authorization
(see below) to restrict the users who may access the unlocked data.</li>
<li><b>Relocking the database</b>: To relock your data, simply shut down the
database.</li>
</ol>
<p>The following sections provide detailed information about database
encryption.</p>
<note>Jar files stored in a database are not encrypted.</note>
</conbody>
</concept>
